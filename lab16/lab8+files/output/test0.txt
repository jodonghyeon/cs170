---------------------TestConstructors---------------------
============================================
Total number of Lists created: 0
============================================

testing default sctor ...
list1 is empty
Items in list1: 0
use push_front to add 10 elements to list1
list1:   30  27  24  21  18  15  12   9   6   3
Items in list1: 10
============================================
Total number of Lists created: 1
============================================

testing copy ctor ...
list2:   30  27  24  21  18  15  12   9   6   3
list2 is not empty
Items in list2: 10
============================================
Total number of Lists created: 2
============================================

testing single-argument ctor ...
list3:    4   7  12   5   9  23   7  11  15   2
list3 is not empty
Items in list3: 10
============================================
Total number of Lists created: 3
============================================

testing single-argument ctor ...
list4:   11
list4 is not empty
Items in list4: 1
============================================
Total number of Lists created: 4
============================================

---------------------TestPushFrontBackAndPop---------------------
============================================
Total number of Lists created: 0
============================================

testing ListInt::push_front() ...
   5   4   3   2   1
Items in the list: 5

============================================
Total number of Lists created: 1
============================================

testing ListInt::push_back() ...
   1   2   3   4   5
Items in the list: 5

============================================
Total number of Lists created: 2
============================================

testing ListInt::push_front() and ListInt::push_back() ...
  10   9   8   7   6   5   4   3   2   1   5  10  15  20  25  30  35  40  45  50
Items in the list: 20

============================================
Total number of Lists created: 3
============================================

testing ListInt::pop_front() ...
Original list:   10   9   8   7   6   5   4   3   2   1
Items in the list: 10
First item was: 10
New list:    9   8   7   6   5   4   3   2   1
Items in the list: 9
First item was: 9
New list:    8   7   6   5   4   3   2   1
Items in the list: 8
First item was: 8
New list:    7   6   5   4   3   2   1
Items in the list: 7
First item was: 7
New list:    6   5   4   3   2   1
Items in the list: 6
First item was: 6
New list:    5   4   3   2   1
Items in the list: 5
First item was: 5
New list:    4   3   2   1
Items in the list: 4
First item was: 4
New list:    3   2   1
Items in the list: 3
First item was: 3
New list:    2   1
Items in the list: 2
First item was: 2
New list:    1
Items in the list: 1
First item was: 1
New list: 
Items in the list: 0

============================================
Total number of Lists created: 4
============================================

---------------------TestAssignments---------------------
============================================
Total number of Lists created: 0
============================================

list1:   20  18  16  14  12  10   8   6   4   2
Before assignment:
list2: 
After assignment:
list1:   20  18  16  14  12  10   8   6   4   2
list2:   20  18  16  14  12  10   8   6   4   2
Before assignment:
list3: 
After assignment:
list1:   20  18  16  14  12  10   8   6   4   2
list2:   20  18  16  14  12  10   8   6   4   2
list3:   20  18  16  14  12  10   8   6   4   2

Assigning initializer list: {4, 7, 12, 5, 9, 23, 7, 11, 15, 2}
After assignment:
list1:    4   7  12   5   9  23   7  11  15   2
list2:    4   7  12   5   9  23   7  11  15   2
list3:    4   7  12   5   9  23   7  11  15   2

============================================
Total number of Lists created: 3
============================================

---------------------TestAdditions---------------------
============================================
Total number of Lists created: 0
============================================

testing operator+ ...
Before addition:
list1:    5   4   3   2   1
list2:   50  40  30  20  10
After addition list1+list2:
list3:    5   4   3   2   1  50  40  30  20  10
After addition list1+list2+list3:
list4:    5   4   3   2   1  50  40  30  20  10   5   4   3   2   1  50  40  30  20  10
Items in the list: 20

After addition list1+list2+{31, 41, 51, 61, 71}:
list4:    5   4   3   2   1  50  40  30  20  10  31  41  51  61  71
Items in the list: 15

After addition {31, 41, 51, 61, 71}+list1+list2:
list4:   31  41  51  61  71   5   4   3   2   1  50  40  30  20  10
Items in the list: 15

testing ListInt::operator+= ...
Before addition:
list1:    5   4   3   2   1
list2:   50  40  30  20  10
After addition list1 += list2:
list1:    5   4   3   2   1  50  40  30  20  10
list2:   50  40  30  20  10
Items in list1: 10

Before addition:
list1:    5   4   3   2   1  50  40  30  20  10
list5: 
After addition list1 += list5:
list1:    5   4   3   2   1  50  40  30  20  10
list5: 
Items in list1: 10

Before addition:
list6:    5   4   3   2   1
list7:   10   8   6   4   2
list8:   25  20  15  10   5
After addition:
list6:    5   4   3   2   1  10   8   6   4   2  25  20  15  10   5
list7:   10   8   6   4   2  25  20  15  10   5
list8:   25  20  15  10   5
Items in the list: 15

============================================
Total number of Lists created: 8
============================================

---------------------TestSubscript---------------------
============================================
Total number of Lists created: 0
============================================

testing operator[](size_type) const
list1:  -11  11  22  33  44  55  66  77  88  99
list[0] = -11
list[5] = 55
list[9] = 99

testing operator[](size_type) 
Original list2:  -11  11  22  33  44  55  66  77  88  99
Modified list2:   10  11  22  33  44  20  66  22  88  30

