********** TestPushPop **********
push/pop int
a: [size=0, capacity=0, allocs=0]
push_back 5 ints
-1 [size=1, capacity=1, allocs=1]
-1 1 [size=2, capacity=2, allocs=2]
-1 1 -2 [size=3, capacity=4, allocs=3]
-1 1 -2 2 [size=4, capacity=4, allocs=3]
-1 1 -2 2 -3 [size=5, capacity=8, allocs=4]
now push_back 5 more ints:
-1 1 -2 2 -3 10 [size=6, capacity=8, allocs=4]
-1 1 -2 2 -3 10 -10 [size=7, capacity=8, allocs=4]
-1 1 -2 2 -3 10 -10 20 [size=8, capacity=8, allocs=4]
-1 1 -2 2 -3 10 -10 20 -20 [size=9, capacity=16, allocs=5]
-1 1 -2 2 -3 10 -10 20 -20 -30 [size=10, capacity=16, allocs=5]
now pop_back ints until empty:
-1 1 -2 2 -3 10 -10 20 -20 [size=9, capacity=16, allocs=5]
-1 1 -2 2 -3 10 -10 20 [size=8, capacity=16, allocs=5]
-1 1 -2 2 -3 10 -10 [size=7, capacity=16, allocs=5]
-1 1 -2 2 -3 10 [size=6, capacity=16, allocs=5]
-1 1 -2 2 -3 [size=5, capacity=16, allocs=5]
-1 1 -2 2 [size=4, capacity=16, allocs=5]
-1 1 -2 [size=3, capacity=16, allocs=5]
-1 1 [size=2, capacity=16, allocs=5]
-1 [size=1, capacity=16, allocs=5]
[size=0, capacity=16, allocs=5]
[size=0, capacity=16, allocs=5]

push/pop char
s i n g a p o r e [size=9, capacity=10, allocs=2]
pop_back chars until empty:
s i n g a p o r [size=8, capacity=10, allocs=2]
s i n g a p o [size=7, capacity=10, allocs=2]
s i n g a p [size=6, capacity=10, allocs=2]
s i n g a [size=5, capacity=10, allocs=2]
s i n g [size=4, capacity=10, allocs=2]
s i n [size=3, capacity=10, allocs=2]
s i [size=2, capacity=10, allocs=2]
s [size=1, capacity=10, allocs=2]
[size=0, capacity=10, allocs=2]
[size=0, capacity=10, allocs=2]

push/pop hlp2::Str
Namaste Hello Bonjour Hola Annyeonghaseyo Nin Hao Konnichiwa Guten Tag [size=8, capacity=10, allocs=2]
pop_back strings until empty:
Namaste Hello Bonjour Hola Annyeonghaseyo Nin Hao Konnichiwa [size=7, capacity=10, allocs=2]
Namaste Hello Bonjour Hola Annyeonghaseyo Nin Hao [size=6, capacity=10, allocs=2]
Namaste Hello Bonjour Hola Annyeonghaseyo [size=5, capacity=10, allocs=2]
Namaste Hello Bonjour Hola [size=4, capacity=10, allocs=2]
Namaste Hello Bonjour [size=3, capacity=10, allocs=2]
Namaste Hello [size=2, capacity=10, allocs=2]
Namaste [size=1, capacity=10, allocs=2]
[size=0, capacity=10, allocs=2]
[size=0, capacity=10, allocs=2]

push/pop double
2.1 -3.2 4.3 -5.4 5.5 -6.6 7.7 -8.8 9.9 10 [size=10, capacity=16, allocs=2]
pop_back doubles until empty:
2.1 -3.2 4.3 -5.4 5.5 -6.6 7.7 -8.8 9.9 [size=9, capacity=16, allocs=2]
2.1 -3.2 4.3 -5.4 5.5 -6.6 7.7 -8.8 [size=8, capacity=16, allocs=2]
2.1 -3.2 4.3 -5.4 5.5 -6.6 7.7 [size=7, capacity=16, allocs=2]
2.1 -3.2 4.3 -5.4 5.5 -6.6 [size=6, capacity=16, allocs=2]
2.1 -3.2 4.3 -5.4 5.5 [size=5, capacity=16, allocs=2]
2.1 -3.2 4.3 -5.4 [size=4, capacity=16, allocs=2]
2.1 -3.2 4.3 [size=3, capacity=16, allocs=2]
2.1 -3.2 [size=2, capacity=16, allocs=2]
2.1 [size=1, capacity=16, allocs=2]
[size=0, capacity=16, allocs=2]
[size=0, capacity=16, allocs=2]

push/pop pair<hlp2::Str, std::string>
<Seattle, WA> <Portland, OR> <Vancouver, BC> <Santa Barbara, CA> <Toronto, ON> <Montreal, PQ> [size=6, capacity=8, allocs=2]
pop_back pair<hlp2::Str, std::string> until empty:
<Seattle, WA> <Portland, OR> <Vancouver, BC> <Santa Barbara, CA> <Toronto, ON> [size=5, capacity=8, allocs=2]
<Seattle, WA> <Portland, OR> <Vancouver, BC> <Santa Barbara, CA> [size=4, capacity=8, allocs=2]
<Seattle, WA> <Portland, OR> <Vancouver, BC> [size=3, capacity=8, allocs=2]
<Seattle, WA> <Portland, OR> [size=2, capacity=8, allocs=2]
<Seattle, WA> [size=1, capacity=8, allocs=2]
[size=0, capacity=8, allocs=2]
[size=0, capacity=8, allocs=2]
